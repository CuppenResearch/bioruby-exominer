#!/usr/bin/env ruby
#
# BioRuby exominer Plugin BioExominer
# Author:: Pjotr Prins
# Copyright:: 2013
#
# Copyright (C) 2013 Pjotr Prins <pjotr.prins@thebird.nl>

USAGE = "exominer takes a symbol file and parses the piped data for gene symbols"

gempath = File.dirname(File.dirname(__FILE__))
$: << File.join(gempath,'lib')

VERSION_FILENAME=File.join(gempath,'VERSION')
version = File.new(VERSION_FILENAME).read.chomp

# print banner
$stderr.print "exominer #{version} (biogem Ruby #{RUBY_VERSION}) by Pjotr Prins 2013\n"

if ARGV.size == 0
  print USAGE
end

require 'bio-exominer'
require 'optparse'

# Uncomment when using the bio-logger 
# require 'bio-logger'
# log = Bio::Log::LoggerPlus.new 'exominer'
# log.outputters = Bio::Log::Outputter.stderr 
# Bio::Log::CLI.logger('stderr')
# Bio::Log::CLI.trace('info')

options = { show_help: false, symbols: []}
opts = OptionParser.new do |o|
  o.banner = "Usage: #{File.basename($0)} [options] filename\ne.g.  #{File.basename($0)} -s ncbi_symbols.tab --rdf < test.txt"

  o.on("--rdf", "Generate RDF") do |b|
    options[:rdf] = true
  end
  o.on("--name name", 'Set name of result set') do |name|
    options[:name] = name
  end
  o.on("-s","--symbols fn", 'Symbol file fn') do |fn|
    options[:symbols] += [fn]
  end
  o.on("-i","--ignore fn", 'Ignore symbols in fn') do |fn|
    options[:ignore] = fn
  end
  o.on("--tag string", 'Tag string') do |tag|
    tags = {}
    ts = tag.split(/\s?;\s?/)
    ts.each do |field|
      key,value = field.split(/\s?=\s?/)
      tags[key] = value
    end
    options[:tags] = tags
  end
  
  # Uncomment the following when using the bio-logger 
  # o.separator ""
  # o.on("--logger filename",String,"Log to file (default stderr)") do | name |
  #   Bio::Log::CLI.logger(name)
  # end
  #
  # o.on("--trace options",String,"Set log level (default INFO, see bio-logger)") do | s |
  #   Bio::Log::CLI.trace(s)
  # end
  # 
  # o.on("-q", "--quiet", "Run quietly") do |q|
  #   Bio::Log::CLI.trace('error')
  # end
  # 
  # o.on("-v", "--verbose", "Run verbosely") do |v|
  #   Bio::Log::CLI.trace('info')
  # end
  # 
  # o.on("--debug", "Show debug messages") do |v|
  #   Bio::Log::CLI.trace('debug')
  # end

  o.separator ""
  o.on_tail('-h', '--help', 'display this help and exit') do
    options[:show_help] = true
  end
end

require 'bio-exominer/textparser'
require 'bio-exominer/symbols'
require 'yaml'

include BioExominer

begin
  opts.parse!(ARGV)

  if options[:show_help]
    print opts 
    exit 1
  end

  $stderr.print options

  # Create unique name for the resultset
  name = options[:name]
  name = options[:doi] if not name
  name = 'anon' if not name

  # Uncomment when using the bio-logger
  # Bio::Log::CLI.configure('exominer')
  # logger = Bio::Log::LoggerPlus['exominer']
  # Log parsed options and remaining arguments in ARGV
  # logger.info [options, ARGV]

  $stderr.print "\nLoading text and tokenizing..."
  buf = ARGF.read
  tokens = TextParser::tokenize(buf)

  symbol_count = 0
  alias_count = 0
  symbol_matches = {}
  alias_matches = {}
  info = {}
  options[:symbols].each do |symbolfn|
    Symbols::each(symbolfn) do | symbol,aliases,descr |
      # p [symbol,aliases,descr]
      symbol_count += 1
      alias_count += aliases.size if aliases
      if tokens[symbol]
        symbol_matches[symbol] ||= 0
        symbol_matches[symbol] += 1
        info[symbol] = { :symbol => symbol, :aliases => aliases, :descr => descr, :symbolfn => symbolfn }
      end  
      if aliases
        aliases.each do | word |
          full = word + ' (' + symbol + ')'
          if tokens[word]
            alias_matches[word] ||= 0
            alias_matches[word] += 1
            info[word] = { :symbol => symbol, :aliases => aliases, :descr => descr, :symbolfn => symbolfn }
          end
        end
      end
    end
  end
  if options[:rdf]
    # Write RDF!
    print <<HEADER

# RDF output by bio-exominer https://github.com/pjotrp/bioruby-exominer
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix : <http://biobeat.org/rdf/exominer/ns#>  .

HEADER
    symbol_matches.each do | symbol, freq |
      print ":#{symbol} :freq #{freq} .\n"
    end
  else
    print "\nMatching symbol aliases:\n"
    alias_matches.sort_by{|k,v| v}.each do | k,v |
      print v,"\t",k,"\t",info[k][:symbol],"\t",info[k][:descr],"\n"
    end
    print "\nMatching symbols:\n"
    symbol_matches.sort_by{|k,v| v}.each do | k,v |
      print v,"\t",k,"\t",info[k][:descr],"\n"
    end
  end
  $stderr.print "\nA total of #{symbol_count} symbols and #{alias_count} aliases scanned."
  $stderr.print "\nDone!\n"
rescue OptionParser::InvalidOption => e
  options[:invalid_argument] = e.message
end

